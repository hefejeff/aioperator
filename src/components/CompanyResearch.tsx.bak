import React, { useState, useEffect } from 'react';
import { Icons } from '../constants';
import { useTranslation } from '../i18n';
import type { CompanyResearch as CompanyInfo, RelatedScenario } from '../types';
import ResearchSidebar from './ResearchSidebar';
import { getScenarios, saveCompanyResearch, saveRelatedScenarios, getCompanyResearch, getRelatedScenarios } from '../services/firebaseService';
import { researchCompany, findRelevantScenarios } from '../services/geminiService';
import ResearchListView from './ResearchListView';

interface CompanyResearchProps {
  userId: string;
  onSelectScenario?: (scenarioId: string) => void;
}

type View = 'LIST' | 'RESEARCH';

const CompanyResearch: React.FC<CompanyResearchProps> = ({ userId, onSelectScenario }) => {
  const [view, setView] = useState<View>('LIST');
  const [companyName, setCompanyName] = useState('');
  const [isLoading, setIsLoading] = useState(false);
  const [companyInfo, setCompanyInfo] = useState<CompanyInfo | null>(null);
  const [relatedScenarios, setRelatedScenarios] = useState<RelatedScenario[]>([]);
  const [error, setError] = useState<string | null>(null);
  const [selectedCompanyName, setSelectedCompanyName] = useState<string | null>(null);
  const [isSidebarOpen, setIsSidebarOpen] = useState(true);

  const { t } = useTranslation();

  const loadExistingResearch = async (companyName: string) => {
    setIsLoading(true);
    setError(null);
    try {
      const research = await getCompanyResearch(userId, companyName);
      if (research) {
        setCompanyInfo(research);
        const scenarios = await getRelatedScenarios(userId, companyName);
        setRelatedScenarios(scenarios);
      }
    } catch (error) {
      console.error('Failed to load existing research:', error);
      setError(t('common.error'));
    } finally {
      setIsLoading(false);
    }
  };

  const handleResearch = async () => {
    if (!companyName.trim()) return;

    setIsLoading(true);
    setError(null);
    try {
      // Research company
      const researchData = await researchCompany(companyName);

      // Get existing research if any
      const existingResearch = await getCompanyResearch(userId, companyName);
      const history = existingResearch ? 
        [researchData.currentResearch, ...existingResearch.history] :
        [researchData.currentResearch];

      const updatedInfo = { 
        name: companyName,
        currentResearch: researchData.currentResearch,
        history,
        lastUpdated: Date.now()
      };
      setCompanyInfo(updatedInfo);

      // Find related scenarios
      const scenarios = await getScenarios(userId);
      const matchedScenarios = await findRelevantScenarios(updatedInfo, scenarios);
      setRelatedScenarios(matchedScenarios);

      // Save the research and scenarios
      await Promise.all([
        saveCompanyResearch(userId, companyName, researchData.currentResearch),
        saveRelatedScenarios(userId, companyName, matchedScenarios)
      ]);

      // After successful save, update view to show success
      setView('LIST');
    } catch (error) {
      console.error('Research failed:', error);
      setError(t('common.error'));
    } finally {
      setIsLoading(false);
    }
  };

  const handleKeyPress = (event: React.KeyboardEvent) => {
    if (event.key === 'Enter') {
      handleResearch();
    }
  };

  const handleSelectCompany = (companyName: string) => {
    setSelectedCompanyName(companyName);
    setCompanyName(companyName);
    setView('RESEARCH');
    loadExistingResearch(companyName);
  };

  const handleNewResearch = () => {
    setView('RESEARCH');
    setSelectedCompanyName(null);
    setCompanyInfo(null);
    setRelatedScenarios([]);
    setCompanyName('');
  };

  // Effect to load company research when switching to RESEARCH view with a selected company
  useEffect(() => {
    if (view === 'RESEARCH' && selectedCompanyName) {
      loadExistingResearch(selectedCompanyName);
    }
  }, [view, selectedCompanyName]);

  const handleScenarioSelect = (scenarioId: string) => {
    onSelectScenario?.(scenarioId);
  };

  if (view === 'LIST') {
    return (
      <div className="space-y-6">
        <div className="flex justify-between items-center">
          <h1 className="text-2xl font-semibold text-white">{t('research.researchList')}</h1>
          <button
            onClick={handleNewResearch}
            className="px-4 py-2 bg-blue-600 text-white rounded-lg hover:bg-blue-700 transition-colors flex items-center gap-2"
          >
            <Icons.Plus className="w-5 h-5" />
            {t('research.newResearch')}
          </button>
        </div>
        <ResearchListView userId={userId} onSelectCompany={handleSelectCompany} />
      </div>
    );
  }

  return (
    <div className="space-y-6 lg:mr-80">
      {/* Research Sidebar */}
      <ResearchSidebar
        relatedScenarios={relatedScenarios}
        isOpen={isSidebarOpen}
        onClose={() => setIsSidebarOpen(false)}
        onSelectScenario={handleScenarioSelect}
      />

      {/* Search Input */}
      <div className="flex justify-between items-center mb-6">
        <div>
          <h1 className="text-2xl font-semibold text-white">{t('research.title')}</h1>
          <button
            onClick={() => setView('LIST')}
            className="text-blue-400 hover:text-blue-300 transition-colors mt-2 flex items-center gap-1"
          >
            <Icons.ChevronLeft className="w-4 h-4" />
            {t('common.back')}
          </button>
        </div>
        <button
          onClick={() => setSelectedCompanyName(null)}
          className="px-4 py-2 bg-blue-600 text-white rounded-lg hover:bg-blue-700 transition-colors flex items-center gap-2"
        >
          {t('research.clearCompany')}
        </button>
      </div>

      <div className="bg-slate-800 border border-slate-700 rounded-xl p-6">
        <div className="flex gap-2">
          <input
            type="text"
            value={companyName}
            onChange={(e) => setCompanyName(e.target.value)}
            onKeyPress={handleKeyPress}
            placeholder={t('research.searchPlaceholder')}
            className="flex-1 bg-slate-900 text-white p-3 rounded-lg border border-slate-600 focus:border-emerald-500 focus:outline-none"
          />
          <button
            onClick={handleResearch}
            disabled={isLoading || !companyName.trim()}
            className="px-6 py-3 bg-emerald-600 text-white rounded-lg hover:bg-emerald-700 disabled:opacity-50 disabled:cursor-not-allowed flex items-center gap-2"
          >
            {isLoading ? (
              <>
                <div className="animate-spin rounded-full h-4 w-4 border-b-2 border-white"></div>
                {t('research.searching')}
              </>
            ) : (
              <>
                <Icons.Search className="w-5 h-5" />
                {t('common.search')}
              </>
            )}
          </button>
        </div>
      </div>

      {error && (
        <div className="bg-red-900/30 border-l-4 border-red-500 text-red-300 p-4 rounded-r-lg">
          {error}
        </div>
      )}

      {/* Research Results */}
      {companyInfo && (
        <div className="bg-slate-800 border border-slate-700 rounded-xl p-6">
          <h2 className="text-lg font-semibold text-white mb-4">{t('research.companyInfo')}</h2>
          
          <div className="space-y-6">
            <div>
              <h3 className="text-white font-medium mb-2">{t('research.description')}</h3>
              <p className="text-slate-300">{companyInfo?.currentResearch.description}</p>
            </div>

            <div>
              <h3 className="text-white font-medium mb-2">{t('research.industry')}</h3>
              <p className="text-slate-300">{companyInfo?.currentResearch.industry}</p>
            </div>

            <div>
              <h3 className="text-white font-medium mb-2">{t('research.marketPosition')}</h3>
              <p className="text-slate-300">{companyInfo?.currentResearch.marketPosition}</p>
            </div>

            <div>
              <h3 className="text-white font-medium mb-2">{t('research.products')}</h3>
              <ul className="list-disc list-inside text-slate-300 space-y-1">
                {companyInfo?.currentResearch.products.map((product, index) => (
                  <li key={index}>{product}</li>
                ))}
              </ul>
            </div>

            <div>
              <h3 className="text-white font-medium mb-2">{t('research.competitors')}</h3>
              <ul className="list-disc list-inside text-slate-300 space-y-1">
                {companyInfo?.currentResearch.competitors.map((competitor, index) => (
                  <li key={index}>{competitor}</li>
                ))}
              </ul>
            </div>

            <div>
              <h3 className="text-white font-medium mb-2">{t('research.challenges')}</h3>
              <ul className="list-disc list-inside text-slate-300 space-y-1">
                {companyInfo?.currentResearch.challenges.map((challenge, index) => (
                  <li key={index}>{challenge}</li>
                ))}
              </ul>
            </div>

            <div>
              <h3 className="text-white font-medium mb-2">{t('research.opportunities')}</h3>
              <ul className="list-disc list-inside text-slate-300 space-y-1">
                {companyInfo?.currentResearch.opportunities.map((opportunity, index) => (
                  <li key={index}>{opportunity}</li>
                ))}
              </ul>
            </div>

            <div>
              <h3 className="text-white font-medium mb-2">{t('research.aiUseCases')}</h3>
              <ul className="list-disc list-inside text-slate-300 space-y-1">
                {companyInfo?.currentResearch.useCases.map((useCase, index) => (
                  <li key={index}>{useCase}</li>
                ))}
              </ul>
            </div>

            <div className="border-t border-slate-700 pt-6">
              <h3 className="text-white font-medium mb-4">{t('research.aiAnalysis')}</h3>
              
              <div className="space-y-4">
                <div>
                  <h4 className="text-slate-300 font-medium mb-2">{t('research.currentAI')}</h4>
                  <p className="text-slate-400">{companyInfo?.currentResearch.aiRelevance.current}</p>
                </div>
                
                <div>
                  <h4 className="text-slate-300 font-medium mb-2">{t('research.potentialAI')}</h4>
                  <p className="text-slate-400">{companyInfo?.currentResearch.aiRelevance.potential}</p>
                </div>
                
                <div>
                  <h4 className="text-slate-300 font-medium mb-2">{t('research.aiRecommendations')}</h4>
                  <ul className="list-disc list-inside text-slate-400 space-y-1">
                    {companyInfo?.currentResearch.aiRelevance.recommendations.map((rec, index) => (
                      <li key={index}>{rec}</li>
                    ))}
                  </ul>
                </div>
              </div>
            </div>
          </div>
        </div>
      )}

      {/* Related Scenarios */}
      {relatedScenarios.length > 0 && (
        <div className="bg-slate-800 border border-slate-700 rounded-xl p-6">
          <h2 className="text-lg font-semibold text-white mb-4">{t('research.relatedScenarios')}</h2>
          <div className="space-y-4">
            {relatedScenarios.map((scenario) => (
              <div
                key={scenario.id}
                className="bg-slate-900/50 p-4 rounded-lg border border-slate-600 hover:border-slate-500 transition-colors"
              >
                <div className="flex items-start justify-between">
                  <div>
                    <h3 className="text-white font-medium mb-2">{scenario.title}</h3>
                    <p className="text-slate-400 text-sm mb-3">{scenario.description}</p>
                  </div>
                  <div className="ml-4">
                    <span className="bg-emerald-900/50 text-emerald-400 px-2 py-1 rounded text-sm">
                      {Math.round(scenario.relevanceScore * 10)}% {t('research.relevanceMatch')}
                    </span>
                  </div>
                </div>
                <p className="text-sm text-slate-500 italic">{scenario.relevanceReason}</p>
              </div>
            ))}
          </div>
        </div>
      )}
    </div>
  );
};

export default CompanyResearch;