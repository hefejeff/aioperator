import { ref, get, push, set, update, remove, query, orderByChild, equalTo } from 'firebase/database';
import { db } from './firebaseInit';
import type { Company, CompanyResearch } from '../types';
import {
  saveCompanyResearch,
  getCompanyResearch,
  listCompanyResearch,
  getCompanyResearchHistory,
  saveRelatedScenarios,
  saveMultipleCompanyScenarios,
  getRelatedScenarios
} from './firebaseService';

// Company Operations
export const saveCompany = async (
  userId: string,
  companyName: string,
  research: CompanyResearch,
  selectedScenarios: string[] = []
): Promise<Company> => {
  try {
    const companiesRef = ref(db, 'companies');
    // Create company entry
    const newCompanyRef = push(companiesRef);
    const timestamp = Date.now();
    
    const companyData: Company = {
      id: newCompanyRef.key as string,
      name: companyName,
      createdBy: userId,
      createdAt: timestamp,
      lastUpdated: timestamp,
      selectedScenarios,
      research
    };

    await set(newCompanyRef, companyData);
    return companyData;
  } catch (error) {
    console.error('Failed to save company:', error);
    throw error;
  }
};

export const getCompany = async (companyIdOrName: string, userId?: string): Promise<Company | null> => {
  try {
    // Get all companies
    const companiesRef = ref(db, 'companies');
    const snapshot = await get(companiesRef);
    
    if (!snapshot.exists()) {
      return null;
    }

    const companies = snapshot.val();
    let companyId: string | null = null;
    let companyData: any = null;

    // First try direct ID lookup
    if (companies[companyIdOrName]) {
      companyId = companyIdOrName;
      companyData = companies[companyIdOrName];
    } 
    // Then try to find by name and userId
    else if (userId) {
      const match = Object.entries(companies).find(([_, data]: [string, any]) => 
        data.createdBy === userId && data.name?.toLowerCase() === companyIdOrName.toLowerCase()
      );
      
      if (match) {
        [companyId, companyData] = match;
      }
    }

    if (!companyId || !companyData) {
      return null;
    }

    // Get the research data
    const researchRef = ref(db, `companyResearch/${companyData.createdBy}/${companyData.name.toLowerCase()}`);
    const researchSnapshot = await get(researchRef);

    return {
      id: companyId,
      name: companyData.name,
      createdBy: companyData.createdBy,
      createdAt: companyData.createdAt,
      lastUpdated: companyData.lastUpdated,
      selectedScenarios: companyData.selectedScenarios || [],
      research: researchSnapshot.exists() ? researchSnapshot.val() : null
    } as Company;
  } catch (error) {
    console.error('Failed to get company:', error);
    throw error;
  }
};

export const getUserCompanies = async (userId: string): Promise<Company[]> => {
  try {
    const companiesRef = ref(db, 'companies');
    const companiesQuery = query(companiesRef, orderByChild('createdBy'), equalTo(userId));
    const snapshot = await get(companiesQuery);
    
    if (!snapshot.exists()) {
      return [];
    }
    
    const companies = snapshot.val();
    return Object.entries(companies).map(([id, data]: [string, any]) => ({
      id,
      ...data
    } as Company));
  } catch (error) {
    console.error('Failed to get user companies:', error);
    throw error;
  }
};

export const updateCompanySelectedScenarios = async (
  companyId: string,
  userId: string,
  selectedScenarios: string[]
): Promise<void> => {
  try {
    // First verify user owns the company
    const companyRef = ref(db, `companies/${companyId}`);
    const snapshot = await get(companyRef);
    
    if (!snapshot.exists()) {
      throw new Error('Company not found');
    }
    
    const company = snapshot.val() as Company;
    if (company.createdBy !== userId) {
      throw new Error('Not authorized to update this company');
    }
    
    // Update selected scenarios
    await update(companyRef, {
      selectedScenarios,
      lastUpdated: Date.now()
    });
  } catch (error) {
    console.error('Failed to update company selected scenarios:', error);
    throw error;
  }
};

export const deleteCompany = async (companyId: string, userId: string): Promise<void> => {
  try {
    // First verify user owns the company
    const companyRef = ref(db, `companies/${companyId}`);
    const snapshot = await get(companyRef);
    
    if (!snapshot.exists()) {
      throw new Error('Company not found');
    }
    
    const company = snapshot.val() as Company;
    if (company.createdBy !== userId) {
      throw new Error('Not authorized to delete this company');
    }
    
    // Delete the company
    await remove(companyRef);
  } catch (error) {
    console.error('Failed to delete company:', error);
    throw error;
  }
};

// Re-export the existing company research functions for backward compatibility
export {
  saveCompanyResearch,
  getCompanyResearch,
  listCompanyResearch,
  getCompanyResearchHistory,
  saveRelatedScenarios,
  saveMultipleCompanyScenarios,
  getRelatedScenarios
} from './firebaseService';